from sqlalchemy import Column, Float, Integer, String, ForeignKey, Table
from sqlalchemy.orm import relationship, backref

from . import Base


MATERIAL = 'material'
ARTEFACT = 'artefact'
COLLECTOR = 'collector'
COLLECTION = 'collection'
REWARD = 'reward'
MYSTERY = 'mystery'

TABLE_NAMES = [MATERIAL, ARTEFACT, COLLECTOR, COLLECTION, REWARD, MYSTERY]

# ----------------------------- #

material_artefact = Table(
    f'{MATERIAL}_{ARTEFACT}',
    Base.metadata,
    Column('material_id', Integer, ForeignKey(f'{MATERIAL}.id')),
    Column('artefact_id', Integer, ForeignKey(f'{ARTEFACT}.id')),
    Column('amount', Integer)
)

artefact_collection_reward = Table(
    f'{ARTEFACT}_{COLLECTION}',
    Base.metadata,
    Column('artefact_id', Integer, ForeignKey(f'{ARTEFACT}.id')),
    Column('collection_id', Integer, ForeignKey(f'{COLLECTION}.id')),
    Column('reward_id', Integer, ForeignKey(f'{REWARD}.id')),
    Column('amount', Integer)
)

artefact_mystery = Table(
    f'{ARTEFACT}_{MYSTERY}',
    Base.metadata,
    Column('artefact_id', Integer, ForeignKey(f'{ARTEFACT}.id')),
    Column('mystery_id', Integer, ForeignKey(f'{MYSTERY}.id'))
)

reward_collection = Table(
    f'{REWARD}_{COLLECTION}',
    Base.metadata,
    Column('reward_id', Integer, ForeignKey(f'{REWARD}.id')),
    Column('collection_id', Integer, ForeignKey(f'{COLLECTION}.id')),
    Column('amount', Integer)
)

# ----------------------------- #

class Material(Base):
    """A skilling resource that can be used to repair artefacts.

    Parameters
    ----------
    id : Integer
        The unique ID of the item assigned by Runescape
    name : String
        The in-game name of the Material.
    alignment : {'Agnostic','Armadylean','Bandosian','Dragonkin','Saradominist','Zamorakian','Zarosian'}
        What kind of artefacts this material is used to restore.
    artefacts : relationship
        All of the `Artefact`s that require this material to restore.
            
    Notes
    -----
    Tetracompass Piece is considered both a `Material` and a `Reward`
    """

    __tablename__ = MATERIAL

    id = Column(Integer, primary_key=True)
    name = Column(String)
    alignment = Column(String)

    artefacts = relationship(
        'Artefact', secondary=material_artefact, back_populates='materials'
    )

    def __repr__(self):
        return f'<Material: id={self.id} name="{self.name}">'

class Artefact(Base):
    """An item that can be restored and added to a collection.

    Parameters
    ----------
    id : Integer
        The unique ID of the (restored) item assigned by Runescape
    name : String
        The in-game name of the Material.
    alignment : {'Armadylean','Bandosian','Dragonkin','Saradominist','Zamorakian','Zarosian'}
        What kind of digsite this artefact is excavated from.
    level_required : Integer
        What Archaeology level is required to restore the damaged artefact.
    xp : Integer
        The experienced gained by restored the artefact.
    materials : relationship
        The `Material`s required to restore the artefact.
    rewards : relationship
        The `Reward`(s) for adding the artefact to a `Collection`.
    """

    __tablename__ = ARTEFACT

    id = Column(Integer, primary_key=True)
    name = Column(String)
    alignment = Column(String)
    level_required = Column(Integer)
    xp = Column(Float)

    materials = relationship(
        'Material', secondary=material_artefact, backref=backref(ARTEFACT)
        )
    rewards = relationship(
        'Reward', secondary=artefact_collection_reward, backref=backref(ARTEFACT)
        )

    def __repr__(self):
        return f'<Artefact: id={self.id} name="{self.name}">'
        
class Collector(Base):
    """A NPC that collects artefacts in exchange for rewards.
    
    Parameters
    ----------
    id : Integer
        The unique NPC ID of the Collector assigned by Runescape
    name : String
        The in-game name of the Collector.
    collections : relationship
        The `Collection`s that the NPC has.
    """

    __tablename__ = COLLECTOR

    id = Column(Integer, primary_key=True)
    name = Column(String)

    collections = relationship('Collection', backref=backref(COLLECTOR))

    def __repr__(self):
        return f'<Collector: id={self.id} name="{self.id}">'

class Collection(Base):
    """A set of artefacts that can be turned in to a collector.

    Parameters
    ----------
    id : Integer
        A unique identifier for the collection (autogenerated)
    name : String
        The in-game name of the collection.
    collector_id : String
        The `id` of the NPC `Collector`.
    alignment : {'Agnostic','Armadylean','Bandosian','Dragonkin','Saradominist','Zamorakian','Zarosian'}
        What kind of artefacts this material is used to restore.
    
    artefacts : relationship
        All of the `Artefact`s in the collection.
    """

    __tablename__ = COLLECTION

    id = Column(Integer, primary_key=True)
    name = Column(String)
    collector_id = Column(String, ForeignKey(f'{COLLECTOR}.id'))
    alignment = Column(String)

    artefacts = relationship(
        'Artefact', secondary=artefact_collection_reward, backref=backref(COLLECTION)
        )
    rewards = relationship(
        'Reward', secondary=artefact_collection_reward, backref=backref(COLLECTION)
        )

    def __repr__(self):
        return f'<Collection: "{self.id}" "{self.collector.id}" {self.level_required}>'

class Reward(Base):
    """An item received for adding to or completing a collection.

    Parameters
    ----------
    id : Integer
        The unique ID of the item assigned by Runescape
    name : String
        The in-game name of the reward.
    artefacts : relationship
        All of the `Artefact`s that will yield this reward when added to
        a collection.
    collections : relationship
        All of the `Collection`s that will yield this reward when
        completed.
        
    Notes
    -----
    Tetracompass Piece is considered both a `Reward` and a `Material`.
    """
    
    __tablename__ = REWARD

    id = Column(Integer, primary_key=True)
    name = Column(String)

    artefacts = relationship(
        'Artefact', secondary=artefact_collection_reward, back_populates='rewards'
    )
    collections = relationship(
        'Collection', secondary=artefact_collection_reward, back_populates='rewards'
    )

    def __repr__(self):
        return f'<Reward: id={self.id} name="{self.name}">'

class Mystery(Base):
    """An Archaeology mini-quest that may require artefacts to complete.
    
    id : Integer
        A unique identifier for the mystery (autogenerated)
    name : String
        The in-game name of the mystery.
    level_required : Integer
        The Archaeology level required to complete the mystery.
    alignment : {'Agnostic','Armadylean','Bandosian','Dragonkin','Saradominist','Zamorakian','Zarosian'}
        The alignment of the digsite at which the mystery is completed.
    artefacts : relationship
        All of the `Artefact`s required to complete the mystery.
    """

    __tablename__ = MYSTERY

    id = Column(Integer, primary_key=True)
    name = Column(String)
    level_required = Column(Integer)
    alignment = Column(String)

    artefacts = relationship(
        'Artefact', secondary=artefact_mystery, backref=backref(MYSTERY)
        )

    def __repr__(self):
        return f'<Mystery: id={self.id} name="{self.name}">'


TABLES = [Material, Artefact, Collector, Collection, Reward, Mystery]